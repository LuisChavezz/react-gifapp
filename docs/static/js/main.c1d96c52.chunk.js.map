{"version":3,"sources":["components/AddAnime.js","components/GifGridItem.js","helpers/getGifs.js","components/GifGrid.js","GifExpertApp.js","index.js"],"names":["AddAnime","setAnime","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","animes","TextField","onChange","target","value","id","label","variant","autoComplete","GifGridItem","img","className","src","url","alt","title","getGifs","anime","a","fetch","response","json","data","gifs","map","images","downsized_medium","GifGrid","setImages","useEffect","then","imgs","gif","GifExpertApp","ReactDOM","render","document","getElementById"],"mappings":"4MAIaA,EAAW,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAEvB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAeA,OACI,sBAAMC,SAVW,SAACC,GAClBA,EAAEC,iBAEGJ,EAAWK,OAAOC,OAAS,IAC5BR,GAAU,SAAAS,GAAM,OAAMP,GAAN,mBAAqBO,OACrCN,EAAc,MAKlB,SAEI,cAACO,EAAA,EAAD,CACIC,SAjBc,SAACN,GACvBF,EAAeE,EAAEO,OAAOC,QAiBhBC,GAAG,iBACHC,MAAM,QACNC,QAAQ,WACRH,MAAQX,EACRe,aAAa,WC3BhBC,EAAc,SAAC,GAAa,IAAXC,EAAU,EAAVA,IAI1B,OACI,sBAAKC,UAAU,2DAAf,UACI,qBAAKC,IAAMF,EAAIG,IAAMC,IAAMJ,EAAIK,QAC/B,4BAAKL,EAAIK,Y,yBCPRC,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEbL,EAFa,0FAE6EI,EAF7E,sBAIIE,MAAON,GAJX,cAIbO,EAJa,gBAKIA,EAASC,OALb,uBAKZC,EALY,EAKZA,KAEDC,EAAOD,EAAKE,KAAK,SAAAd,GACnB,MAAO,CACHL,GAAIK,EAAIL,GACRU,MAAOL,EAAIK,MACXF,IAAKH,EAAIe,OAAOC,iBAAiBb,QAXtB,kBAeZU,GAfY,4CAAH,sDCIPI,EAAU,SAAC,GAAe,IAAbV,EAAY,EAAZA,MAEtB,EAA4BzB,mBAAS,IAArC,mBAAOiC,EAAP,KAAeG,EAAf,KAOA,OALAC,qBAAW,WACPb,EAASC,GAAQa,MAAM,SAAAC,GAAI,OAAIH,EAAWG,QAC3C,CAAEd,IAID,gCACI,6BAAMA,IACN,qBAAKN,UAAU,YAAf,SAEQc,EAAOD,KAAK,SAAAQ,GAAG,OACX,cAAC,EAAD,CAEItB,IAAMsB,GADAA,EAAI3B,aClBzB4B,EAAe,WAExB,MAA2BzC,mBAAU,IAArC,mBAAOQ,EAAP,KAAeT,EAAf,KAEA,OAEI,cADA,CACA,sBACI,gDACA,cAAC,EAAD,CAAUA,SAAWA,IACrB,uBAEA,6BAEQS,EAAOwB,KAAK,SAAAP,GAAK,OACb,aADmB,CAClB,EAAD,CAEIA,MAAQA,GADFA,Y,YCblCiB,IAASC,OAAQ,cAAC,EAAD,IAAkBC,SAASC,eAAe,W","file":"static/js/main.c1d96c52.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\r\nimport { useState } from 'react';\r\nimport { TextField } from '@material-ui/core';\r\n\r\nexport const AddAnime = ( {setAnime} ) => { //Recibe como prop, la función del useState del componente padre\r\n\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const handleInputChange = (e) => { //recibe el evento\r\n        setInputValue( e.target.value );\r\n    }\r\n\r\n    const handleSubmit = (e) => { //recibe el evento\r\n        e.preventDefault(); //evita el comportamiento molesto de un form\r\n\r\n        if ( inputValue.trim().length > 2 ) {\r\n            setAnime( animes => [ inputValue, ...animes ] ) // asigna un valor al state de anime\r\n            setInputValue('');\r\n        }\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={ handleSubmit }>\r\n            \r\n            <TextField \r\n                onChange={ handleInputChange }\r\n                id=\"outlined-basic\" \r\n                label=\"Texto\" \r\n                variant=\"outlined\"\r\n                value={ inputValue }\r\n                autoComplete='off'\r\n            />\r\n        </form>\r\n    );\r\n\r\n}\r\n\r\n\r\nAddAnime.propTypes = {\r\n    setAnime: PropTypes.func.isRequired\r\n}","\r\n\r\n\r\nexport const GifGridItem = ( {img} ) => {\r\n\r\n\r\n\r\n    return (\r\n        <div className='card animate__animated animate__bounce animate__delay-2s'>\r\n            <img src={ img.url } alt={ img.title } />\r\n            <p>{ img.title }</p>\r\n        </div>\r\n    )\r\n}","\r\n\r\n\r\nexport const getGifs = async( anime ) => {\r\n\r\n    const url = `https://api.giphy.com/v1/gifs/search?api_key=eA53tGpgpoDPXMeKvWNrtmVpmVcGh8pq&q=${ anime }&limit=10`;\r\n\r\n    const response = await fetch( url );\r\n    const {data}   = await response.json();\r\n\r\n    const gifs = data.map( img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images.downsized_medium.url,\r\n        }\r\n    })\r\n\r\n    return gifs;\r\n}","\r\nimport { useState } from 'react';\r\nimport { useEffect } from 'react';\r\nimport { GifGridItem } from './GifGridItem';\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\n\r\nexport const GifGrid = ( {anime} ) => {\r\n\r\n    const [images, setImages] = useState([]);\r\n\r\n    useEffect( () => {\r\n        getGifs( anime ).then( imgs => setImages( imgs ) );\r\n    }, [ anime ]) // si 'anime' cambia, vuelve a ejecutar el efecto (para eso son los corchetes)\r\n\r\n\r\n    return (\r\n        <div>\r\n            <h3>{ anime }</h3>\r\n            <div className='card-grid'>\r\n                {\r\n                    images.map( gif => (\r\n                        <GifGridItem \r\n                            key={ gif.id }\r\n                            img={ gif } \r\n                        />\r\n                    ))\r\n                }\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","import { useState } from \"react\";\r\nimport { AddAnime } from \"./components/AddAnime\";\r\nimport { GifGrid } from \"./components/GifGrid\";\r\n\r\n\r\nexport const GifExpertApp = () => {\r\n\r\n    const [animes, setAnime] = useState( [] ); //valor inicial\r\n\r\n    return (\r\n        //Fragment html\r\n        <>\r\n            <h2>Gif Expert App</h2>\r\n            <AddAnime setAnime={ setAnime } />\r\n            <hr/>\r\n\r\n            <ol>\r\n                { //expresión js\r\n                    animes.map( anime => ( // crea un nuevo arreglo en base a uno existente (lo recorre)\r\n                        <GifGrid \r\n                            key={ anime }\r\n                            anime={ anime }\r\n                        />\r\n                    ))\r\n                }\r\n            </ol>\r\n        </>\r\n    );\r\n\r\n}\r\n\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\nimport \"animate.css\"\n\nimport './index.css';\n\nReactDOM.render( <GifExpertApp />, document.getElementById('root') );\n\n\n// GifExpertApp"],"sourceRoot":""}